import type { NextPage } from 'next'
import Head from 'next/head'
import { createKeys, getPublicKeyEthAddress, sign, verify } from '../services/cryptoKey'
import styles from '../styles/Home.module.css'
import {ethers} from 'ethers';
import { useState } from 'react'
import { buf2hex } from '../utils';

const Home: NextPage = () => {
  const [isSignedIn, setIsSignedIn] = useState(false);
  const [signturesCount, setSignturesCount] = useState(0);
  const [signtures, setSigntures] = useState<string []>([]);

  const rememberMeInBrowser = async () => {

      if(!window?.ethereum) {
        alert('No METAMASK IN HERE :(')
        return;
      }
  
      const provider = new ethers.providers.Web3Provider(window?.ethereum);
      await createKeys();
  
      await provider.send("eth_requestAccounts", []);
      const signer = provider.getSigner();
  
      const address = await signer.getAddress();
      const data = `I ${address} authorize ${await getPublicKeyEthAddress()} to sign my transactions on this website`;
      
      const signture = await signer.signMessage(data).catch(e => console.log(e));

      if(signture && ethers.utils.verifyMessage(data, signture as string) === address) {
        localStorage.setItem('RememberSignture', signture);
        setIsSignedIn(true);
      } else {
        alert("gm but the user doesn't trust you!!")
      }
  }

  const gm = async () => {
    // in real life you should send it from a server
    const nounce = crypto.getRandomValues(new Uint32Array(10));
    const ethSigningAddress = await getPublicKeyEthAddress();
    const message = `I authoirzed address ${ethSigningAddress} is GMing right now at ${new Date()}. some random stuff: ${nounce}`;

   const signture = await sign(message);
  
   if(await verify(signture, message)) {
     setSignturesCount(signturesCount + 1)
     setSigntures([...signtures, (buf2hex(signture))])
   }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <span>Remember.eth</span>
        </h1>
{!isSignedIn && <>
<button onClick={() => rememberMeInBrowser()} className="meta">Remember me</button>
</>}

{
isSignedIn && <>
<button className='gm' onClick={() => gm()}>GM!!!</button>
GM count: {signturesCount}
{signtures.map(s=> <ul>
  <li>{s}</li>
  </ul>)}
</>
}  

</main>
    </div>
  )
}

export default Home
